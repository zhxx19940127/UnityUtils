// 创建基本定时器
TimerManager.Instance.AddTimer("timer1", 5f, () => Debug.Log("完成"));

// 创建带参数定时器
TimerManager.Instance.AddTimer<int>("timer2", 3f, value => Debug.Log($"参数: {value}"), 42);

// 创建带进度回调的定时器
TimerManager.Instance.AddTimerWithProgress("timer3", 4f, () => Debug.Log("完成"), progress => Debug.Log($"进度: {progress}"));

// 创建帧定时器
TimerManager.Instance.AddFrameTimer("frameTimer", 60, () => Debug.Log("60帧完成"));

// 创建上下文定时器
class MyContext : ITimerContext { public void Execute() { Debug.Log("上下文回调"); } }
TimerManager.Instance.AddTimer("timerCtx", 2f, new MyContext());

// 链式定时器
TimerManager.Instance.CreateChain()
    .AddFirst("step1", 2f, () => Debug.Log("第一步"))
    .Then("step2", 3f, () => Debug.Log("第二步"))
    .Then("step3", 1f, () => Debug.Log("第三步"))
    .Run();

// 链式定时器完整配置
TimerManager.Instance.CreateChain()
    .AddFirst("intro", 5f, ShowIntro)
        .WithMode(TimerMode.Realtime)
        .WithTimeoutWarning(1f, () => Debug.Log("即将开始!"))
    .Then("dialog", 3f, ShowDialog)
        .WithCompensation(false)
    .Then("effect", 2f, PlayEffect)
    .Run();

// 链式条件与错误处理
TimerManager.Instance.CreateChain()
    .AddFirst("init", 0.5f, () => Debug.Log("初始化开始"))
    .ThenIf(() => GameState.IsReady, "load", 1f, () => Debug.Log("加载资源"))
    .WithMode(TimerMode.Realtime)
    .Then("spawn", 2f, SpawnEnemies)
    .OnError(err => Debug.LogError($"链式错误: {err}"))
    .Run();

// 延迟2秒后执行
TimerManager.Instance.CreateChain()
    .Delay(2f, () => Debug.Log("2秒后执行"))
    .Run();

// 延迟30帧后执行
TimerManager.Instance.CreateChain()
    .DelayFrames(30, () => Debug.Log("30帧后执行"))
    .Run();

// 暂停/恢复/销毁定时器
TimerManager.Instance.PauseTimer("timer1");
TimerManager.Instance.ResumeTimer("timer1");
TimerManager.Instance.DestroyTimer("timer1");

// 批量操作
TimerManager.Instance.PauseTimersWithPrefix("enemy_");
TimerManager.Instance.ResumeTimersWithPrefix("enemy_");
TimerManager.Instance.DestroyTimersWithPrefix("enemy_");

// 清空所有定时器
TimerManager.Instance.ClearAllTimers();

// 查询定时器状态
bool isActive = TimerManager.Instance.IsTimerActive("timer1");
float remaining = TimerManager.Instance.GetTimerRemaining("timer1");
float progress = TimerManager.Instance.GetTimerProgress("timer2");

// 打印所有活动定时器
TimerManager.Instance.LogActiveTimers();